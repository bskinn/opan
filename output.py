#-------------------------------------------------------------------------------
# Name:        output
# Purpose:     Encapsulation of parsing/handling of data from computation
#                textual output.
#
# Author:      Brian Skinn
#                bskinn@alum.mit.edu
#
# Created:     16 Feb 2015
# Copyright:   (c) Brian Skinn 2015
# License:     The MIT License; see "license.txt" for full license terms
#                   and contributor agreement.
#
#       This file is part of opan (OpenAnharmonic), a system for automated
#       computation of anharmonic properties of molecular systems via wrapper
#       calls to computational/quantum chemical software packages.
#
#       http://www.github.com/bskinn/opan
#
#-------------------------------------------------------------------------------


# Debug constant
_DEBUG = False


class ORCA_OUTPUT(object):
    """ Container for parsed textual output generated by ORCA.

    All implemented results that are found in the indicated output are stored
    in the ORCA_OUTPUT instance.  If a given quantity was not detectable, it
    is stored as None in the corresponding instance variable.

    The verbose contents of the output file are not generally retained within
    the ORCA_OUTPUT instance due to the potential for such to involve a
    tremendously large string. Exceptions include, if present:
        - THERMOCHEMISTRY section

    Instantiation
    -------------
    __init__(output_src, src_type='file')
        Constructor for ORCA output parsing.

    Class Variables
    ---------------
    dict() lookups of re.compile() RegEx patterns:
        p_en    : Energies reported at the end of SCF cycles. Keys:
            EN_SCFFINAL : SCF energy including gCP, D3, etc. corrections
            EN_GCP      : gCP correction
            EN_D3       : D3 correction (D3BJ, at least; unconfirmed with
                            D3ZERO. Likely nonfunctional with DFT-NL)
            EN_SCFOCC   : SCF energy with only COSMO outlying q correction
        p_thermo    : Quantities extracted from THERMOCHEMISTRY block. Keys:
            THERMO_BLOCK    : Entire THERMOCHEMISTRY block
            THERMO_TEMP     : Simulated temperature (K)
            THERMO_PRESS    : Simulated pressure (atm)
            THERMO_E_EL     : Electronic energy from thermo (Eh; often slightly
                                different than the last EN_SCFFINAL value)
            THERMO_E_ZPE    : Zero-point energy in thermo (Eh)
            THERMO_E_VIB    : Thermal vibrational U correction (Eh)
            THERMO_E_ROT    : Thermal rotational U correction (Eh)
            THERMO_E_TRANS  : Thermal translational U correction (Eh)
            THERMO_H_IG     : Ideal-gas (kB*T) enthalpy contribution (Eh)
            THERMO_TS_EL    : Electronic T*S contribution (Eh)
            THERMO_TS_VIB   : Vibrational T*S contribution (Eh)
            THERMO_TS_TRANS : Translational T*S contribution (Eh)
            THERMO_QROT     : Rotational partition function (unitless)

    str constants for keys of above 'dict struct' variables are also defined,
        as class variables.  For example, to retrieve the Regex pattern for
        locating the vibrational entropy contribution, the following syntax
        can be used:

            ORCA_OUTPUT.p_thermo[THERMO_TS_VIB]

    Instance Variables
    ------------------
    src_type : str
        String describing the nature of the source used to create the instance.
    src_src : str
        Descriptor of the location of the source used to create the instance.
    completed : bool
        True if ORCA output reports normal termination, False otherwise.
    converged : bool
        True if SCF converged ANYWHERE IN run. #DOC Update oo.converged
        with any robustifications
    optimized : bool
        True if any OPT converged ANYWHERE in run. Fine for OPT, but ambiguous
        for scans. #DOC Update oo.optimized with any robustifications
    en : dict of lists of np.float64
        Lists of the various energy values from the parsed output. Dict
        keys are those of p_en, above.  Any energy type not found in the
        output is assigned as an empty list.
    thermo : dict of np.float64
        Values from the thermochemistry block of the parsed output. Dict keys
        are those of p_thermo, above.
        #TODO: ORCA_OUTPUT.thermo: Test on single-atom case, update above
        #       documentation to reflect outcome
    thermo_block : str
        Full text of the thermochemistry block, if found.

    Instance Methods
    -------
    en_last : Returns a dict providing the various energy values from the
        last SCF cycle performed in the output. Keys are those of p_en,
        above.  Any energy value not relevant to the parsed output is
        assigned as None.

    Generators
    ----------
    (none)

    """

    # Imports
    import re


    # Various class-level RegEx patterns, collected into dictionaries to
    #  facilitate later iterable data retrieval.
    #
    # IN ALL PATTERNS the group name is the same -- this is to simplify the
    #  parsing process when these patterns are used -- no need to dynamically
    #  fiddle with substituting in custom group names each time! The .replace()
    #  call in each pattern definition saves work if P_GROUP ever needs to be
    #  changed.
    P_GROUP = "val"

    # Patterns for SCF energies, reported at the end of single-point and each
    #  step of geometry optimizations, etc., if not suppressed by %output
    #  settings.

    # String constants for retrieving energy quantities.
    # Prefix is the uppercase of the dictionary name
    EN_SCFFINAL = "scffinal"
    EN_GCP = "gcp"
    EN_D3  = "d3"
    EN_SCFOCC = "scfocc"
    EN_OCC = "occ"
    EN_SCFFINALOCC = "scffinalocc"

    # Initialize dictionary
    p_en = dict()

    # Final SCF energy, with gCP, D3, corrections included... but NOT COSMO
    #  outlying charge correction.
    p_en.update({ EN_SCFFINAL :
        re.compile("""
        -\\n                         # Hyphen on preceding line
        FINAL\\ SINGLE\\             # Key text 1
        POINT\\ ENERGY\\             # Key text 2
        [\\ ]+(?P<>[0-9.-]+)         # Energy on same line as key text
        .*\\n-                       # Hyphen starting following line
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })

    # gCP corrections entering into reported FINAL ENERGY values.
    p_en.update({ EN_GCP :
        re.compile("""
        -\\n                        # Hyphen on preceding line
        gCP\\ correction            # Key text
        [\\ ]+(?P<>[0-9.-]+)        # Energy on same line as key text
        .*\\n-                      # Hyphen starting following line.
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })

    # D3 corrections entering into reported FINAL ENERGY values.
    p_en.update({ EN_D3 :
        re.compile("""
        -\\n                        # Hyphen on preceding line
        Dispersion\\ correction     # Key text
        [\\ ]+(?P<>[0-9.-]+)        # Energy on same line as key text
        .*\\n-                      # Hyphen starting following line.
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })

    # COSMO SCF energies after the COSMO outlying charge correction BUT BEFORE
    #  any other augmentations to the energy (no D3, gCP, etc.)
    p_en.update({ EN_SCFOCC :
        re.compile("""
        Total\\ Energy\\ after\\    # Key text 1
        outlying\\ charge\\         # Key text 2
        correction[\\ ]*=           # Key text 3
        [\\ ]+(?P<>[0-9.-]+)        # Energy following key text
        [\\ ]+Eh.*\\n               # 'Eh' units, then newline
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })

    # Patterns for the entire thermochemistry block, as well as the individual
    #  data elements therein.

    # String constants for retrieving energy quantities.
    # Prefix is the uppercase of the dictionary name
    THERMO_BLOCK = "block"
    THERMO_TEMP = "temp"
    THERMO_PRESS = "press"
    THERMO_E_EL = "e_el"
    THERMO_E_ZPE = "e_zpe"
    THERMO_E_VIB = "e_vib"
    THERMO_E_ROT = "e_rot"
    THERMO_E_TRANS = "e_trans"
    THERMO_H_IG = "h_ig"
    THERMO_TS_EL = "ts_el"
    THERMO_TS_VIB = "ts_vib"
    THERMO_TS_TRANS = "ts_trans"
    THERMO_QROT = "qrot"

    # Initialize dictionary
    p_thermo = dict()

    # Whole thermo block just in case; probably not needed for automated
    #  computation, but potentially handy for manual fiddling.
    p_thermo.update({ THERMO_BLOCK :
        re.compile("""
        (?P<>-+\\n              # Hyphen line
        THERMOCHEMISTRY\\       # Header text
        AT\\ [0-9.]+\\ *K\\n    # Temperature
        -+\\n                   # Hyphen line
        (.|\\n)*)               # Everything until the end
        Timings\\ for\\         # Closing blip 1
        individual\\ modules    # Closing blip 2
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })

    # Individual quantities. Descriptions in pattern definition comments.
    p_thermo.update({ THERMO_TEMP :
        re.compile("""
        temperature[\\ .]+      # Key text
        (?P<>[0-9.]+)           # Temperature value
        [\\ ]+K                 # in Kelvin
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })
    p_thermo.update({ THERMO_PRESS :
        re.compile("""
        pressure[\\ .]+         # Key text
        (?P<>[0-9.]+)           # Pressure value
        [\\ ]+atm               # in atm
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })
    p_thermo.update({ THERMO_E_EL :
        re.compile("""
        electronic\\ energy     # Key text 1
        [\\ .]+                 # Key text 2
        (?P<>[0-9.-]+)          # Electronic energy value
        [\\ ]+Eh                # in Hartrees
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })
    p_thermo.update({ THERMO_E_ZPE :
        re.compile("""
        zero\\ point\\ energy   # Key text 1
        [\\ .]+                 # Key text 2
        (?P<>[0-9.-]+)          # ZPE energy value
        [\\ ]+Eh                # in Hartrees
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })
    p_thermo.update({ THERMO_E_VIB :
        re.compile("""
        thermal\\ vibrational\\ # Key text 1
        correction[\\ .]+       # Key text 2
        (?P<>[0-9.-]+)          # Vibration energy correction value
        [\\ ]+Eh                # in Hartrees
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })
    p_thermo.update({ THERMO_E_ROT :
        re.compile("""
        thermal\\ rotational\\  # Key text 1
        correction[\\ .]+       # Key text 2
        (?P<>[0-9.-]+)          # Rotation energy correction value
        [\\ ]+Eh                # in Hartrees
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })
    p_thermo.update({ THERMO_E_TRANS :
        re.compile("""
        thermal\\               # Key text 1
        translational\\         # Key text 2
        correction[\\ .]+       # Key text 3
        (?P<>[0-9.-]+)          # Translation energy correction value
        [\\ ]+Eh                # in Hartrees
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })
    p_thermo.update({ THERMO_H_IG :
        re.compile("""
        thermal\\ enthalpy\\    # Key text 1
        correction[\\ .]+       # Key text 2
        (?P<>[0-9.-]+)          # Ideal gas enthalpy correction
        [\\ ]+Eh                # in Hartrees
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })
    p_thermo.update({ THERMO_TS_EL :
        re.compile("""
        electronic\\ entropy\\  # Key text
        [\\ .]+                 # Spacer
        (?P<>[0-9.-]+)          # Electronic entropy contribution
        [\\ ]+Eh                # in Hartrees
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })
    p_thermo.update({ THERMO_TS_VIB :
        re.compile("""
        vibrational\\ entropy\\ # Key text
        [\\ .]+                 # Spacer
        (?P<>[0-9.-]+)          # Vibrational entropy contribution
        [\\ ]+Eh                # in Hartrees
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })
    p_thermo.update({ THERMO_TS_TRANS :
        re.compile("""
        translational\\         # Key text 1
        entropy\\               # Key text 2
        [\\ .]+                 # Spacer
        (?P<>[0-9.-]+)          # Translational entropy contribution
        [\\ ]+Eh                # in Hartrees
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })
    p_thermo.update({ THERMO_QROT :
        re.compile("""
        qrot\\ +=\\ +           # Key text
        (?P<>[0-9.]+)           # Rotational partition function
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)
        })


    # Dipole moment pattern
    p_dipmom = re.compile("""
        -+\\n                             # Hyphen line
        dipole\\ moment.*\\n              # Block label
        -+\\n                             # Hyphen line
        (.*\\n)+?                         # Lazy grab of any lines
        Magnitude\ \(debye\)\ +:\ +       # Line leader
        (?P<>[0-9.]+).*\\n                # Grab the dipole moment
        """.replace("P<", "P<" + P_GROUP), re.I | re.X)


    def __init__(self, output_src, src_type="file"):
        """ Initialize ORCA_OUTPUT object.

        Actions performed depend on the indicated 'src_type':

        'file':
            ORCA output is read from a file on disk

        Available data includes:
            SCF energies (incl D3, gCP, COSMO outlying charge corrections)
            Thermochemistry

        Success indicators include:
            completed : Checks for the 'ORCA TERMINATED NORMALLY' report at the
                    end of the file
            converged : Checks for any occurrence of successful SCF convergence
                    in the file (questionable for anything but single-point
                    calculations)
            optimized : Checks for any occurrence of "OPTIMIZATION HAS
                    CONVERGED" in the file (questionable for anything but
                    a standalone OPT -- i.e., not a mode or internal coordinate
                    scan)

        *** ONLY WORKS ON A VERY SMALL SUBSET OF COMPUTATION TYPES!!! ***

        Parameters
        ----------
        output_src : str
            Depending on the value of 'src_type':
                "file" : Full path to the output file to be parsed.
        src_type : str
            One of the following values indicating the type of output data
            source to be parsed:
                file : ORCA output file on disk

        Raises
        ------
        OUTPUTError : If indicated output is un-parseably malformed in some
                        fashion
        ValueError  : If 'src_type' is invalid
        """
        #TODO: (?) ORCA_OUTPUT: Add initialization parameter to indicate which
        # type of run should be expected?

        # Imports
        from orca_utils import pack_tups
        from orca_utils import safe_cast as scast
        from orca_error import OUTPUTError
        import numpy as np

        # Confirm src_type is valid
        if not src_type == "file":
            raise(ValueError("'" + str(src_type) + "' is invalid."))
        ##end if

        # Get the output data
        if src_type == "file":
            with open(output_src) as in_f:
                datastr = in_f.read()
            ##end with
        ##end if

        # Check for normal termination (weird values in dicts, etc. would be
        #  diagnostic also, but might as well define this since it's easy).
        self.completed = datastr.find("ORCA TERMINATED NORMALLY") > -1

        # Simple check for single-point SCF convergence
        # TODO: Probably robustify convergence check to opt, and MDCI/MRCI/CAS
        self.converged = datastr.find("SCF CONVERGED AFTER") > -1

        # Simple check for optimization convergence
        # TODO: Probably robustify optimization convergence check for
        #  scans as well as single optimizations.  Multiple job runs promise
        #  to be thoroughly annoying.
        self.optimized = datastr.find("OPTIMIZATION HAS CONVERGED") > -1

        # Store the source information
        self.src_type = src_type
        self.src_src = output_src

        # Initialize the energies dict as empty
        self.en = dict()

        # Populate with the Regex-retrieved values.
        #  If any are not found, this will store as an empty list.
        for (k,p) in self.p_en.iteritems():
            self.en.update({ k :
                    [scast(m.group(self.P_GROUP), np.float_) for m in
                        p.finditer(datastr)] })
        ##next (k,p)

        # Calculate just the outlying charge correction, if COSMO enabled,
        #  and then calculate the SCFFINAL result including the OCC.
        if not self.en[self.EN_SCFOCC] == []:
            self.en.update({ self.EN_OCC :
                    [t[0] - (t[1] - t[2] - t[3]) for t in
                    pack_tups(
                        self.en[self.EN_SCFOCC],
                        self.en[self.EN_SCFFINAL],
                        self.en[self.EN_D3] if self.en[self.EN_D3] <> []
                                                                else 0,
                        self.en[self.EN_GCP] if self.en[self.EN_GCP] <> []
                                                                else 0
                              )
                    ]       })
            self.en.update({ self.EN_SCFFINALOCC :
                    [t[0] + t[1] for t in
                    pack_tups( # Could use zip() here, probably
                        self.en[self.EN_SCFFINAL],
                        self.en[self.EN_OCC]
                              )
                    ]       })
        ##end if

        # Now collect the thermo quantities
        # Just store the whole thermo block
        try:
            self.thermo_block = \
                    self.p_thermo[self.THERMO_BLOCK].search(datastr).group()
        except AttributeError:
            # Block not found; store as None
            self.thermo_block = None
        else:
            # Only store the block details if the block is actually found!

            # Initialize the empty dictionary for the numericals
            self.thermo = dict()

            # Iterate to pull the individual values
            for (k,p) in self.p_thermo.iteritems():
                if k <> self.THERMO_BLOCK:
                    try:
                        self.thermo.update({ k : \
                                    scast(p.search(datastr) \
                                            .group(self.P_GROUP), np.float_) })
                    except AttributeError:
                        # Value not found, probably due to monoatomic freq calc
                        #  to autogenerate, e.g., enthalpy calculation
                        # Add as just None'
                        self.thermo.update({ k: None })
                    ## end try
                ## end if
            ## next (k,p)
        ## end try

        #TODO: (?) ORCA_OUTPUT: Pull the final geometry and atom masses. Would
        #  be nice not to require a Hessian calculation in order to have this
        #  info available.
        #  Masses and/or geometries may not always be in the output file,
        #  depending on the %output settings.  Also have to address possible
        #  multiples of the coordinates in, e.g., scans.

        # Pull all dipole moments
        self.dipmoms = []
        for m in ORCA_OUTPUT.p_dipmom.finditer(datastr):
            self.dipmoms.append(scast(m.group(ORCA_OUTPUT.P_GROUP), np.float_))
        ## next m


    def en_last(self):
        """ Report the energies from the last SCF present in the output.

        Returns a dict providing the various energy values from the
        last SCF cycle performed in the output. Keys are those of p_en; see
        ORCA_OUTPUT.__doc__.  Any energy value not relevant to the parsed
        output is assigned as None.

        Parameters
        ----------
        (none)

        Returns
        -------
        last_ens : dictionary of np.float64
            Energies from the last SCF present in the output. Reports all
            energy values implemented. Keys are identical to, e.g., the RegEx
            pattern dicts used for searching the output; see the class
            docstring.

        Raises
        ------
        (none)
        """

        # Initialize the return dict
        last_ens = dict()

        # Iterate and store
        for (k,l) in self.en.items():
            last_ens.update({ k : l[-1] if l <> [] else None })
        ##next (k,l)

        # Should be ready to return?
        return last_ens


if __name__ == '__main__':
    print("Module not executable")
